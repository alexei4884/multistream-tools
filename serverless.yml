# Read the documentation at https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml/
service: multistreamSymfony

# useDotenv: true

provider:
    name: aws
    # The AWS region in which to deploy (us-east-1 is the default)
    region: eu-west-2
    # The stage of the application, e.g. dev, production, stagingâ€¦ ('dev' is the default)
    stage: prod
    runtime: provided.al2
    environment:
        # Symfony environment variables
        APP_ENV: prod
        OAUTH_TWITCH_CLIENT_ID: 4aq04w81v8wrvwuuzqtgoulkh3kqfe
        OAUTH_GOOGLE_CLIENT_ID: 610002072379-e5a2r7pvt5vvtgh7flg1rop8krer6eie.apps.googleusercontent.com
        OAUTH_BRIME_CLIENT_ID: 1XrodF60t4nSK2YdGLgvQKpAeRkI47VJ
        DATABASE_URL: ${ssm:/multistreamSymfony/databaseUrl}
        OAUTH_TWITCH_CLIENT_SECRET: ${ssm:/multistreamSymfony/OAUTH_TWITCH_CLIENT_SECRET}
        OAUTH_GOOGLE_CLIENT_SECRET: ${ssm:/multistreamSymfony/OAUTH_GOOGLE_CLIENT_SECRET}
        OAUTH_GOOGLE_API_SECRET: ${ssm:/multistreamSymfony/OAUTH_GOOGLE_API_SECRET}
        OAUTH_BRIME_CLIENT_SECRET: ${ssm:/multistreamSymfony/OAUTH_BRIME_CLIENT_SECRET}

plugins:
    - ./vendor/bref/bref

functions:
    # This function runs the Symfony website/API
    web:
        handler: public/index.php
        memorySize: 512
        timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
        layers:
            - ${bref:layer.php-80-fpm}
        events:
            - httpApi: '*'
        vpc:
            securityGroupIds:
                - sg-0ffa3375
            subnetIds:
                - subnet-00b50f4c
                - subnet-228ba34b
                - subnet-3b87f341
    # This function let us run console commands in Lambda
    console:
        handler: bin/console
        timeout: 120 # in seconds
        layers:
            - ${bref:layer.php-80} # PHP
            - ${bref:layer.console} # The "console" layer
        vpc:
            securityGroupIds:
                - sg-0ffa3375
            subnetIds:
                - subnet-00b50f4c
                - subnet-228ba34b
                - subnet-3b87f341

package:
    patterns:
        # Excluded files and folders for deployment
        - '!assets/**'
        - '!node_modules/**'
        - '!public/build/**'
        - '!tests/**'
        - '!var/**'
        # If you want to include files and folders that are part of excluded folders,
        # add them at the end
        - 'var/cache/prod/**'
        - 'public/build/entrypoints.json'
        - 'public/build/manifest.json'

resources:
    Resources:
        # The S3 bucket that stores the assets
        Assets:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: multistream-tools-assets
        # The policy that makes the bucket publicly readable
        AssetsBucketPolicy:
            Type: AWS::S3::BucketPolicy
            Properties:
                Bucket: !Ref Assets # References the bucket we defined above
                PolicyDocument:
                    Statement:
                        - Effect: Allow
                          Principal: '*' # everyone
                          Action: 's3:GetObject' # to read
                          Resource: !Join [ '/', [ !GetAtt Assets.Arn, '*' ] ] # things in the bucket
                            # alternatively you can write out Resource: 'arn:aws:s3:::<bucket-name>/*'
        WebsiteCDN:
            Type: AWS::CloudFront::Distribution
            Properties:
                DistributionConfig:
                    Enabled: true
                    # Cheapest option by default (https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_DistributionConfig.html)
                    PriceClass: PriceClass_100
                    # Enable http2 transfer for better performances
                    HttpVersion: http2
                    # Origins are where CloudFront fetches content
                    Origins:
                        # The website (AWS Lambda)
                        - Id: Website
                          DomainName: !Join [ '.', [ !Ref HttpApi, 'execute-api', !Ref AWS::Region, 'amazonaws.com' ] ]
                          CustomOriginConfig:
                              OriginProtocolPolicy: 'https-only' # API Gateway only supports HTTPS
                              # CloudFront does not forward the original `Host` header. We use this
                              # to forward the website domain name to PHP via the `X-Forwarded-Host` header.
                              # Learn more: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host
                              #OriginCustomHeaders:
                              #    -   HeaderName: 'X-Forwarded-Host'
                              #        HeaderValue: example.com # our custom domain
                        # The assets (S3)
                        - Id: Assets
                          DomainName: !GetAtt Assets.RegionalDomainName
                          S3OriginConfig: { } # this key is required to tell CloudFront that this is an S3 origin, even though nothing is configured
                            # If you host a static website, like a SPA, use s3-website URLs instead of the config above
                            # See https://stackoverflow.com/questions/15309113/amazon-cloudfront-doesnt-respect-my-s3-website-buckets-index-html-rules#15528757
                            # DomainName: !Select [2, !Split ["/", !GetAtt Assets.WebsiteURL]]
                            # CustomOriginConfig:
                            #     OriginProtocolPolicy: 'http-only' # S3 websites only support HTTP
                            # You'll also need to enable website hosting on your s3 bucket by configuring the WebsiteConfiguration property
                            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html#cfn-s3-bucket-websiteconfiguration
                    # The default behavior is to send everything to AWS Lambda
                    DefaultCacheBehavior:
                        AllowedMethods: [ GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE ]
                        TargetOriginId: Website # the PHP application
                        # Disable caching for the PHP application https://aws.amazon.com/premiumsupport/knowledge-center/prevent-cloudfront-from-caching-files/
                        DefaultTTL: 0
                        MinTTL: 0
                        MaxTTL: 0
                        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-forwardedvalues.html
                        ForwardedValues:
                            QueryString: true
                            Cookies:
                                Forward: all # Forward cookies to use them in PHP
                            # We must *not* forward the `Host` header else it messes up API Gateway
                            Headers:
                                - 'Accept'
                                - 'Accept-Encoding'
                                - 'Accept-Language'
                                - 'Authorization'
                                - 'Origin'
                                - 'Referer'
                        # CloudFront will force HTTPS on visitors (which is more secure)
                        ViewerProtocolPolicy: redirect-to-https
                    CacheBehaviors:
                        # Assets will be served under the `/assets/` prefix
                        - PathPattern: 'assets/*'
                          TargetOriginId: Assets # the static files on S3
                          AllowedMethods: [ GET, HEAD ]
                          ForwardedValues:
                              # No need for all that with assets
                              QueryString: 'false'
                              Cookies:
                                  Forward: none
                          ViewerProtocolPolicy: redirect-to-https
                          Compress: true # Serve files with gzip for browsers that support it (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html)
                    CustomErrorResponses:
                        # Force CloudFront to not cache HTTP errors
                        - ErrorCode: 500
                          ErrorCachingMinTTL: 0
                        - ErrorCode: 504
                          ErrorCachingMinTTL: 0

